"""
Í≥†ÎèÑÌôîÎêú ÏóêÎü¨ Ï≤òÎ¶¨ ÏãúÏä§ÌÖú

Ïù¥ Î™®ÎìàÏùÄ Personal AI AssistantÏùò Ï†ÑÏó≠ ÏóêÎü¨ Ï≤òÎ¶¨, Ïû¨ÏãúÎèÑ Ï†ÑÎûµ, ÏóêÎü¨ Î≥¥Í≥† ÏãúÏä§ÌÖúÏùÑ Ï†úÍ≥µÌï©ÎãàÎã§.
"""

import asyncio
import functools
import logging
import traceback
import time
from enum import Enum
from typing import Any, Callable, Dict, List, Optional, Type, Union
from dataclasses import dataclass, field
from datetime import datetime, timedelta
import json

from src.utils.logger import get_logger

logger = get_logger(__name__)


class ErrorSeverity(Enum):
    """ÏóêÎü¨ Ïã¨Í∞ÅÎèÑ Î†àÎ≤®"""
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class ErrorCategory(Enum):
    """ÏóêÎü¨ Ïπ¥ÌÖåÍ≥†Î¶¨"""
    NETWORK = "network"
    API = "api"
    DATABASE = "database"
    AUTHENTICATION = "authentication"
    VALIDATION = "validation"
    SYSTEM = "system"
    USER_INPUT = "user_input"
    EXTERNAL_SERVICE = "external_service"
    UNKNOWN = "unknown"


class AISystemError(Exception):
    """ÏãúÏä§ÌÖú Í¥ÄÎ†® ÏóêÎü¨"""
    def __init__(self, message: str, context: Optional[Dict] = None):
        super().__init__(message)
        self.message = message
        self.context = context or {}


class AINetworkError(Exception):
    """ÎÑ§Ìä∏ÏõåÌÅ¨ Í¥ÄÎ†® ÏóêÎü¨"""
    def __init__(self, message: str, status_code: Optional[int] = None):
        super().__init__(message)
        self.message = message
        self.status_code = status_code


class AIValidationError(Exception):
    """Í≤ÄÏ¶ù Í¥ÄÎ†® ÏóêÎü¨"""
    def __init__(self, message: str, field: Optional[str] = None):
        super().__init__(message)
        self.message = message
        self.field = field


@dataclass
class ErrorContext:
    """ÏóêÎü¨ Ïª®ÌÖçÏä§Ìä∏ Ï†ïÎ≥¥"""
    error_id: str
    timestamp: datetime
    severity: ErrorSeverity
    category: ErrorCategory
    component: str
    operation: str
    user_id: Optional[str] = None
    session_id: Optional[str] = None
    additional_data: Dict[str, Any] = field(default_factory=dict)


@dataclass
class RetryConfig:
    """Ïû¨ÏãúÎèÑ ÏÑ§Ï†ï"""
    max_attempts: int = 3
    base_delay: float = 1.0
    max_delay: float = 60.0
    exponential_base: float = 2.0
    jitter: bool = True
    retryable_exceptions: tuple = (Exception,)
    non_retryable_exceptions: tuple = ()


class PersonalAIError(Exception):
    """Personal AI Assistant Í∏∞Î≥∏ ÏóêÎü¨ ÌÅ¥ÎûòÏä§"""
    
    def __init__(
        self,
        message: str,
        severity: ErrorSeverity = ErrorSeverity.MEDIUM,
        category: ErrorCategory = ErrorCategory.UNKNOWN,
        component: str = "unknown",
        operation: str = "unknown",
        original_error: Optional[Exception] = None,
        context: Optional[Dict[str, Any]] = None
    ):
        super().__init__(message)
        self.message = message
        self.severity = severity
        self.category = category
        self.component = component
        self.operation = operation
        self.original_error = original_error
        self.context = context or {}
        self.timestamp = datetime.now()
        self.error_id = f"{component}_{operation}_{int(time.time())}"


class NetworkError(PersonalAIError):
    """ÎÑ§Ìä∏ÏõåÌÅ¨ Í¥ÄÎ†® ÏóêÎü¨"""
    def __init__(self, message: str, **kwargs):
        super().__init__(message, category=ErrorCategory.NETWORK, **kwargs)


class APIError(PersonalAIError):
    """API Í¥ÄÎ†® ÏóêÎü¨"""
    def __init__(self, message: str, **kwargs):
        super().__init__(message, category=ErrorCategory.API, **kwargs)


class DatabaseError(PersonalAIError):
    """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Í¥ÄÎ†® ÏóêÎü¨"""
    def __init__(self, message: str, **kwargs):
        super().__init__(message, category=ErrorCategory.DATABASE, **kwargs)


class AuthenticationError(PersonalAIError):
    """Ïù∏Ï¶ù Í¥ÄÎ†® ÏóêÎü¨"""
    def __init__(self, message: str, **kwargs):
        super().__init__(message, category=ErrorCategory.AUTHENTICATION, severity=ErrorSeverity.HIGH, **kwargs)


class ValidationError(PersonalAIError):
    """Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨ ÏóêÎü¨"""
    def __init__(self, message: str, **kwargs):
        super().__init__(message, category=ErrorCategory.VALIDATION, severity=ErrorSeverity.LOW, **kwargs)


class SystemError(PersonalAIError):
    """ÏãúÏä§ÌÖú Í¥ÄÎ†® ÏóêÎü¨"""
    def __init__(self, message: str, **kwargs):
        super().__init__(message, category=ErrorCategory.SYSTEM, severity=ErrorSeverity.HIGH, **kwargs)


class ErrorReporter:
    """ÏóêÎü¨ Î≥¥Í≥† ÏãúÏä§ÌÖú"""
    
    def __init__(self):
        self.error_history: List[ErrorContext] = []
        self.error_counts: Dict[str, int] = {}
        self.last_report_time: Dict[str, datetime] = {}
    
    def report_error(
        self,
        error: Exception,
        component: str = "unknown",
        operation: str = "unknown",
        context: Optional[Dict[str, Any]] = None
    ) -> ErrorContext:
        """ÏóêÎü¨ Î≥¥Í≥†"""
        
        # PersonalAIErrorÏù∏ Í≤ΩÏö∞ Í∏∞Ï°¥ Ï†ïÎ≥¥ ÏÇ¨Ïö©
        if isinstance(error, PersonalAIError):
            severity = error.severity
            category = error.category
            error_component = error.component
            error_operation = error.operation
            error_context = error.context
        else:
            # ÏùºÎ∞ò ÏòàÏô∏Ïù∏ Í≤ΩÏö∞ Î∂ÑÎ•ò
            severity = self._classify_severity(error)
            category = self._classify_category(error)
            error_component = component
            error_operation = operation
            error_context = context or {}
        
        # ÏóêÎü¨ Ïª®ÌÖçÏä§Ìä∏ ÏÉùÏÑ±
        error_ctx = ErrorContext(
            error_id=f"{error_component}_{error_operation}_{int(time.time())}",
            timestamp=datetime.now(),
            severity=severity,
            category=category,
            component=error_component,
            operation=error_operation,
            additional_data=error_context
        )
        
        # ÏóêÎü¨ ÌûàÏä§ÌÜ†Î¶¨Ïóê Ï∂îÍ∞Ä
        self.error_history.append(error_ctx)
        
        # ÏóêÎü¨ Ïπ¥Ïö¥Ìä∏ Ï¶ùÍ∞Ä
        error_key = f"{error_component}_{error_operation}_{type(error).__name__}"
        self.error_counts[error_key] = self.error_counts.get(error_key, 0) + 1
        
        # Î°úÍπÖ
        self._log_error(error, error_ctx)
        
        # Ïã¨Í∞ÅÌïú ÏóêÎü¨Ïù∏ Í≤ΩÏö∞ Ï¶âÏãú ÏïåÎ¶º
        if severity in [ErrorSeverity.HIGH, ErrorSeverity.CRITICAL]:
            self._send_alert(error, error_ctx)
        
        return error_ctx
    
    def _classify_severity(self, error: Exception) -> ErrorSeverity:
        """ÏóêÎü¨ Ïã¨Í∞ÅÎèÑ ÏûêÎèô Î∂ÑÎ•ò"""
        error_type = type(error).__name__
        
        # Ïã¨Í∞ÅÌïú ÏóêÎü¨Îì§
        if any(keyword in error_type.lower() for keyword in ['critical', 'fatal', 'system']):
            return ErrorSeverity.CRITICAL
        
        # ÎÜíÏùÄ Ïã¨Í∞ÅÎèÑ ÏóêÎü¨Îì§
        if any(keyword in error_type.lower() for keyword in ['auth', 'permission', 'security']):
            return ErrorSeverity.HIGH
        
        # Ï§ëÍ∞Ñ Ïã¨Í∞ÅÎèÑ ÏóêÎü¨Îì§
        if any(keyword in error_type.lower() for keyword in ['connection', 'timeout', 'api']):
            return ErrorSeverity.MEDIUM
        
        # ÎÇÆÏùÄ Ïã¨Í∞ÅÎèÑ ÏóêÎü¨Îì§
        if any(keyword in error_type.lower() for keyword in ['validation', 'input', 'format']):
            return ErrorSeverity.LOW
        
        return ErrorSeverity.MEDIUM
    
    def _classify_category(self, error: Exception) -> ErrorCategory:
        """ÏóêÎü¨ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏûêÎèô Î∂ÑÎ•ò"""
        error_type = type(error).__name__.lower()
        error_msg = str(error).lower()
        
        if any(keyword in error_type or keyword in error_msg for keyword in ['network', 'connection', 'timeout']):
            return ErrorCategory.NETWORK
        
        if any(keyword in error_type or keyword in error_msg for keyword in ['api', 'http', 'rest']):
            return ErrorCategory.API
        
        if any(keyword in error_type or keyword in error_msg for keyword in ['database', 'sql', 'db']):
            return ErrorCategory.DATABASE
        
        if any(keyword in error_type or keyword in error_msg for keyword in ['auth', 'token', 'permission']):
            return ErrorCategory.AUTHENTICATION
        
        if any(keyword in error_type or keyword in error_msg for keyword in ['validation', 'invalid', 'format']):
            return ErrorCategory.VALIDATION
        
        if any(keyword in error_type or keyword in error_msg for keyword in ['system', 'os', 'file']):
            return ErrorCategory.SYSTEM
        
        return ErrorCategory.UNKNOWN
    
    def _log_error(self, error: Exception, context: ErrorContext):
        """ÏóêÎü¨ Î°úÍπÖ"""
        log_data = {
            "error_id": context.error_id,
            "timestamp": context.timestamp.isoformat(),
            "severity": context.severity.value,
            "category": context.category.value,
            "component": context.component,
            "operation": context.operation,
            "error_type": type(error).__name__,
            "error_message": str(error),
            "traceback": traceback.format_exc(),
            "context": context.additional_data
        }
        
        if context.severity == ErrorSeverity.CRITICAL:
            logger.critical(f"CRITICAL ERROR: {json.dumps(log_data, indent=2)}")
        elif context.severity == ErrorSeverity.HIGH:
            logger.error(f"HIGH SEVERITY ERROR: {json.dumps(log_data, indent=2)}")
        elif context.severity == ErrorSeverity.MEDIUM:
            logger.warning(f"MEDIUM SEVERITY ERROR: {json.dumps(log_data, indent=2)}")
        else:
            logger.info(f"LOW SEVERITY ERROR: {json.dumps(log_data, indent=2)}")
    
    def _send_alert(self, error: Exception, context: ErrorContext):
        """Ïã¨Í∞ÅÌïú ÏóêÎü¨ ÏïåÎ¶º Î∞úÏÜ°"""
        # TODO: Discord Ï±ÑÎÑêÏù¥ÎÇò Ïù¥Î©îÏùºÎ°ú ÏïåÎ¶º Î∞úÏÜ°
        logger.error(f"üö® ALERT: {context.severity.value.upper()} error in {context.component}: {str(error)}")
    
    def get_error_statistics(self) -> Dict[str, Any]:
        """ÏóêÎü¨ ÌÜµÍ≥Ñ Î∞òÌôò"""
        now = datetime.now()
        last_24h = now - timedelta(hours=24)
        last_hour = now - timedelta(hours=1)
        
        # ÏµúÍ∑º 24ÏãúÍ∞Ñ ÏóêÎü¨
        recent_errors = [e for e in self.error_history if e.timestamp >= last_24h]
        
        # ÏµúÍ∑º 1ÏãúÍ∞Ñ ÏóêÎü¨
        hourly_errors = [e for e in self.error_history if e.timestamp >= last_hour]
        
        # Ïã¨Í∞ÅÎèÑÎ≥Ñ ÌÜµÍ≥Ñ
        severity_stats = {}
        for severity in ErrorSeverity:
            severity_stats[severity.value] = len([e for e in recent_errors if e.severity == severity])
        
        # Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÌÜµÍ≥Ñ
        category_stats = {}
        for category in ErrorCategory:
            category_stats[category.value] = len([e for e in recent_errors if e.category == category])
        
        return {
            "total_errors_24h": len(recent_errors),
            "total_errors_1h": len(hourly_errors),
            "severity_breakdown": severity_stats,
            "category_breakdown": category_stats,
            "error_counts": self.error_counts,
            "most_frequent_errors": sorted(self.error_counts.items(), key=lambda x: x[1], reverse=True)[:10]
        }


class RetryHandler:
    """Ïû¨ÏãúÎèÑ Ï≤òÎ¶¨Í∏∞"""
    
    def __init__(self, config: Optional[RetryConfig] = None):
        self.config = config or RetryConfig()
    
    def retry(
        self,
        func: Optional[Callable] = None,
        *,
        max_attempts: Optional[int] = None,
        base_delay: Optional[float] = None,
        max_delay: Optional[float] = None,
        exponential_base: Optional[float] = None,
        jitter: Optional[bool] = None,
        retryable_exceptions: Optional[tuple] = None,
        non_retryable_exceptions: Optional[tuple] = None
    ):
        """Ïû¨ÏãúÎèÑ Îç∞ÏΩîÎ†àÏù¥ÌÑ∞"""
        
        # ÏÑ§Ï†ï Ïò§Î≤ÑÎùºÏù¥Îìú
        config = RetryConfig(
            max_attempts=max_attempts or self.config.max_attempts,
            base_delay=base_delay or self.config.base_delay,
            max_delay=max_delay or self.config.max_delay,
            exponential_base=exponential_base or self.config.exponential_base,
            jitter=jitter if jitter is not None else self.config.jitter,
            retryable_exceptions=retryable_exceptions or self.config.retryable_exceptions,
            non_retryable_exceptions=non_retryable_exceptions or self.config.non_retryable_exceptions
        )
        
        def decorator(f):
            @functools.wraps(f)
            def wrapper(*args, **kwargs):
                return self._execute_with_retry(f, config, *args, **kwargs)
            
            @functools.wraps(f)
            async def async_wrapper(*args, **kwargs):
                return await self._execute_with_retry_async(f, config, *args, **kwargs)
            
            if asyncio.iscoroutinefunction(f):
                return async_wrapper
            else:
                return wrapper
        
        if func is None:
            return decorator
        else:
            return decorator(func)
    
    def _execute_with_retry(self, func: Callable, config: RetryConfig, *args, **kwargs):
        """ÎèôÍ∏∞ Ìï®Ïàò Ïû¨ÏãúÎèÑ Ïã§Ìñâ"""
        last_exception = None
        
        for attempt in range(config.max_attempts):
            try:
                return func(*args, **kwargs)
            except config.non_retryable_exceptions:
                # Ïû¨ÏãúÎèÑÌïòÏßÄ ÏïäÎäî ÏòàÏô∏Îäî Ï¶âÏãú re-raise
                raise
            except config.retryable_exceptions as e:
                last_exception = e
                
                if attempt == config.max_attempts - 1:
                    # ÎßàÏßÄÎßâ ÏãúÎèÑÏòÄÏúºÎ©¥ ÏòàÏô∏ Î∞úÏÉù
                    break
                
                # ÏßÄÏó∞ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
                delay = self._calculate_delay(attempt, config)
                
                logger.warning(
                    f"Attempt {attempt + 1}/{config.max_attempts} failed: {str(e)}. "
                    f"Retrying in {delay:.2f} seconds..."
                )
                
                time.sleep(delay)
        
        # Î™®Îì† Ïû¨ÏãúÎèÑ Ïã§Ìå®
        if last_exception:
            raise last_exception
        else:
            raise RuntimeError("Î™®Îì† Ïû¨ÏãúÎèÑÍ∞Ä Ïã§Ìå®ÌñàÏäµÎãàÎã§")
    
    async def _execute_with_retry_async(self, func: Callable, config: RetryConfig, *args, **kwargs):
        """ÎπÑÎèôÍ∏∞ Ìï®Ïàò Ïû¨ÏãúÎèÑ Ïã§Ìñâ"""
        last_exception = None
        
        for attempt in range(config.max_attempts):
            try:
                return await func(*args, **kwargs)
            except config.non_retryable_exceptions:
                # Ïû¨ÏãúÎèÑÌïòÏßÄ ÏïäÎäî ÏòàÏô∏Îäî Ï¶âÏãú re-raise
                raise
            except config.retryable_exceptions as e:
                last_exception = e
                
                if attempt == config.max_attempts - 1:
                    # ÎßàÏßÄÎßâ ÏãúÎèÑÏòÄÏúºÎ©¥ ÏòàÏô∏ Î∞úÏÉù
                    break
                
                # ÏßÄÏó∞ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
                delay = self._calculate_delay(attempt, config)
                
                logger.warning(
                    f"Attempt {attempt + 1}/{config.max_attempts} failed: {str(e)}. "
                    f"Retrying in {delay:.2f} seconds..."
                )
                
                await asyncio.sleep(delay)
        
        # Î™®Îì† Ïû¨ÏãúÎèÑ Ïã§Ìå®
        if last_exception:
            raise last_exception
        else:
            raise RuntimeError("Î™®Îì† Ïû¨ÏãúÎèÑÍ∞Ä Ïã§Ìå®ÌñàÏäµÎãàÎã§")
    
    def _calculate_delay(self, attempt: int, config: RetryConfig) -> float:
        """ÏßÄÏó∞ ÏãúÍ∞Ñ Í≥ÑÏÇ∞ (ÏßÄÏàò Î∞±Ïò§ÌîÑ + ÏßÄÌÑ∞)"""
        delay = config.base_delay * (config.exponential_base ** attempt)
        delay = min(delay, config.max_delay)
        
        if config.jitter:
            # ÏßÄÌÑ∞ Ï∂îÍ∞Ä (¬±25%)
            import random
            jitter_range = delay * 0.25
            delay += random.uniform(-jitter_range, jitter_range)
        
        return max(0, delay)


class GlobalErrorHandler:
    """Ï†ÑÏó≠ ÏóêÎü¨ Ìï∏Îì§Îü¨"""
    
    def __init__(self):
        self.reporter = ErrorReporter()
        self.retry_handler = RetryHandler()
        self._original_excepthook: Optional[Callable] = None
    
    def install_global_handler(self):
        """Ï†ÑÏó≠ ÏòàÏô∏ Ìï∏Îì§Îü¨ ÏÑ§Ïπò"""
        import sys
        
        self._original_excepthook = sys.excepthook
        sys.excepthook = self._handle_exception
    
    def uninstall_global_handler(self):
        """Ï†ÑÏó≠ ÏòàÏô∏ Ìï∏Îì§Îü¨ Ï†úÍ±∞"""
        import sys
        
        if self._original_excepthook:
            sys.excepthook = self._original_excepthook
    
    def _handle_exception(self, exc_type, exc_value, exc_traceback):
        """Ï†ÑÏó≠ ÏòàÏô∏ Ï≤òÎ¶¨"""
        # ÏãúÏä§ÌÖú Ï¢ÖÎ£å Í¥ÄÎ†® ÏòàÏô∏Îäî Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÏùå
        if issubclass(exc_type, KeyboardInterrupt):
            if self._original_excepthook:
                return self._original_excepthook(exc_type, exc_value, exc_traceback)
            return
        
        # ÏóêÎü¨ Î≥¥Í≥†
        self.reporter.report_error(
            exc_value,
            component="global",
            operation="unhandled_exception",
            context={
                "exc_type": exc_type.__name__,
                "traceback": traceback.format_exception(exc_type, exc_value, exc_traceback)
            }
        )
        
        # ÏõêÎ≥∏ Ìï∏Îì§Îü¨ Ìò∏Ï∂ú
        if self._original_excepthook:
            return self._original_excepthook(exc_type, exc_value, exc_traceback)


# Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§
global_error_handler = GlobalErrorHandler()
error_reporter = global_error_handler.reporter
retry_handler = global_error_handler.retry_handler


def handle_errors(
    component: str,
    operation: str = "unknown",
    severity: ErrorSeverity = ErrorSeverity.MEDIUM,
    category: ErrorCategory = ErrorCategory.UNKNOWN,
    reraise: bool = True
):
    """ÏóêÎü¨ Ï≤òÎ¶¨ Îç∞ÏΩîÎ†àÏù¥ÌÑ∞"""
    
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kwargs):
            try:
                return func(*args, **kwargs)
            except Exception as e:
                error_reporter.report_error(
                    e,
                    component=component,
                    operation=operation,
                    context={"args": str(args), "kwargs": str(kwargs)}
                )
                
                if reraise:
                    raise
                
                return None
        
        @functools.wraps(func)
        async def async_wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                error_reporter.report_error(
                    e,
                    component=component,
                    operation=operation,
                    context={"args": str(args), "kwargs": str(kwargs)}
                )
                
                if reraise:
                    raise
                
                return None
        
        if asyncio.iscoroutinefunction(func):
            return async_wrapper
        else:
            return wrapper
    
    return decorator


def retry_on_failure(
    max_attempts: int = 3,
    base_delay: float = 1.0,
    max_delay: float = 60.0,
    exponential_base: float = 2.0,
    jitter: bool = True,
    retryable_exceptions: tuple = (Exception,),
    non_retryable_exceptions: tuple = ()
):
    """Ïû¨ÏãúÎèÑ Îç∞ÏΩîÎ†àÏù¥ÌÑ∞ (Ìé∏Ïùò Ìï®Ïàò)"""
    return retry_handler.retry(
        max_attempts=max_attempts,
        base_delay=base_delay,
        max_delay=max_delay,
        exponential_base=exponential_base,
        jitter=jitter,
        retryable_exceptions=retryable_exceptions,
        non_retryable_exceptions=non_retryable_exceptions
    )


# Î™®Îìà Ï¥àÍ∏∞Ìôî Ïãú Ï†ÑÏó≠ Ìï∏Îì§Îü¨ ÏÑ§Ïπò
global_error_handler.install_global_handler()
logger.info("Í≥†ÎèÑÌôîÎêú ÏóêÎü¨ Ï≤òÎ¶¨ ÏãúÏä§ÌÖúÏù¥ Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.")
